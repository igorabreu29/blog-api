let sqlite3 = require('sqlite3').verbose();

const DBSOURCE = "db.sqlite";

let db = new sqlite3.Database(DBSOURCE, (err) => {
    if (err) {
        // Cannot open database
        console.log("Error in connection");
        console.error(err.message);
        throw err;
    } else {

        db.serialize(() => {
            console.log('Connected to the SQLite database.');
            db.run(`CREATE TABLE user (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name text, 
                bio text
                )`,
                (err) => {
                    if (err) {
                        // Table already created
                        db.serialize(() => {
                            db.run("delete from user");
                            var insert = 'INSERT INTO user (id,name,bio) VALUES (?,?,?)';
                            db.run(insert, [1, "Test User 1", "Test bio"]);
                            db.run(insert, [2, "Test User 2", "Test bio 2"]);
                            db.run(insert, [3, "Test User 3", "Test bio 3"]);
                        });

                        console.log("User Table present");
                    } else {
                        // Table just created, creating some rows
                        db.serialize(() => {
                            var insert = 'INSERT INTO user (id,name,bio) VALUES (?,?,?)';
                            db.run(insert, [1, "Test User 1", "Test bio"]);
                            db.run(insert, [2, "Test User 2", "Test bio 2"]);
                            db.run(insert, [3, "Test User 3", "Test bio 3"]);
                        });
                    }
                });


            db.run(`CREATE TABLE post (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                image text,
                description text,
                user integer,
                createdAt datetime,
                foreign key(user) references user(id)
            )`, (err) => {
                if (err) {
                    db.serialize(() => {
                        db.run("delete from post");
                        var insert = 'INSERT INTO post(id,image,description,user,createdAt) VALUES(?,?,?,?,?)';
                        db.run(insert, [1, "Test image url", "Test description 1", 2, "2021-09-16 16:00:00"]);
                        db.run(insert, [2, "Test image url 2", "Test description 2", 3, "2021-09-16 17:00:00"]);
                    });

                    console.log("Post table present");
                } else {
                    db.serialize(() => {
                        var insert = 'INSERT INTO post(id,image,description,user,createdAt) VALUES(?,?,?,?,?)';
                        db.run(insert, [1, "Test image url", "Test description 1", 2, "2021-09-16 16:00:00"]);
                        db.run(insert, [2, "Test image url 2", "Test description 2", 3, "2021-09-16 17:00:00"]);
                    });

                }
            });

            db.run(`CREATE TABLE likes(
                userid integer,
                postid integer,
                foreign key(userid) references user(id),
                foreign key(postid) references post(id)
            )`, (err) => {
                if (err) {
                    db.serialize(() => {
                        db.run("delete from likes");
                        // var insert = 'INSERT INTO likes(userid,postid) VALUES(?,?)';
                        // db.run(insert, [2, 1]);
                        // db.run(insert, [3, 1]);
                        // db.run(insert, [2, 2]);
                        // db.run(insert, [3, 2]);
                    });

                    console.log("Likes table present");
                }
                else {
                    db.serialize(() => {
                        // var insert = 'INSERT INTO likes(userid,postid) VALUES(?,?)';
                        // db.run(insert, [2, 1]);
                        // db.run(insert, [3, 1]);
                        // db.run(insert, [2, 2]);
                        // db.run(insert, [3, 2]);
                    });

                }
            });


            db.run(`CREATE TABLE follows(
                from_user integer,
                to_user integer,
                foreign key(from_user) references user(id),
                foreign key(to_user) references user(id)
            )`, (err) => {
                if (err) {
                    db.serialize(() => {
                        db.run("delete from follows");
                        var insert = "INSERT INTO follows(from_user,to_user) VALUES(?,?)";
                        db.run(insert, [2, 3]);
                        db.run(insert, [3, 2]);
                        console.log("Follows table present");
                    });

                }
                else {
                    db.serialize(() => {
                        var insert = "INSERT INTO follows(from_user,to_user) VALUES(?,?)";
                        db.run(insert, [2, 3]);
                        db.run(insert, [3, 2]);
                    });

                }
            });


            db.run(`CREATE TABLE comments(
                comment text,
                userid integer,
                postid integer,
                foreign key(userid) references user(id),
                foreign key(postid) references post(id)
            )`, (err) => {
                if (err) {
                    db.serialize(() => {
                        db.run("delete from comments");
                        // var insert = "INSERT INTO comments(comment,userid,postid) VALUES(?,?,?)";
                        // db.run(insert, ["Test comment 1", 2, 1]);
                        // db.run(insert, ["Test comment 2", 3, 1]);
                        // db.run(insert, ["Test comment 3", 2, 2]);
                        // db.run(insert, ["Test comment 4", 3, 2]);
                    });

                    console.log("Comments table present");
                }
                else {
                    db.serialize(() => {
                        // var insert = "INSERT INTO comments(comment,userid,postid) VALUES(?,?,?)";
                        // db.run(insert, ["Test comment 1", 2, 1]);
                        // db.run(insert, ["test comment 2", 3, 1]);
                        // db.run(insert, ["Test comment 3", 2, 2]);
                        // db.run(insert, ["test comment 4", 3, 2]);
                    });

                }
            });


        });



    }
});


module.exports = db;